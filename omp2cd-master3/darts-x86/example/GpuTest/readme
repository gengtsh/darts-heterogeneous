StencilCuda2.3: 
	one big kernel
	synchronize every timestep
StencilCuda2.3.1: 
	one big kernel + 1 dst matrix + (edges: double cols + double rows)
	synchronize every timestep

StencilCuda2.3.1.1: 
	one big kernel + 1 dst matrix + (edges: double cols + double rows)
	computation ratio (repeat computation part to increase computation time with same matrix size, which means only transfer data once from host to GPU and repeat computation time, further to test when GPU is faster than cpu)
	synchronize every timestep
	not work for hybride version

StencilCuda2.3.1.2:
    1. pure cpu version
    2. pure GPU version: using multiple concurrent streams
    3. hybrid version:    
	    3 kernel: copy rows, copy cols, computation 
	    (1). for small size (within GPU memory), synchronization once
        (2). for medium size(within 2*GPU memory): one part on GPU(no concurrent streams), one part on CPU, synchronization every time step 
            (a): when timestep > than 40, GPU with no concurrent streams performance > GPU with multiple concurrent streams performance
        (3). for huge size (more than 2*GPU memory): part on GPU (multiple concurrent streams), part on CPU, CPU will check whether GPU finish or not, if GPU finish, reinvoke GPU, if GPU didn't finish, invoke 32 CPU cores.

StencilCuda2.3.2.1: (similiar to 2.3.1.2, only change on hybrid version)
    hybrid version:
    CPU can check GPU finished or not, if GPU didn't finish, invoke another 32 CPU codelets, if GPU finished, invoke another GPU codelet 
    GPU can check CPU finished or not, if CPU didn't finish, invoke another GPU codelet. 
    for medium size: GPU part using multiple concurrent streams

StencilCuda2.3.2.2: (similiar to 2.3.2.1, only change on hybrid version)
    hybrid version:
    GPU and CPU can auto adjust required matrix size 

StencilCuda2.4: 
	4 small kernels, synchronize every timestep
        4 small kernels:
            1) regular size, just fit the tile_y,tile_x 
            2) unregular size, several columns more than tile_x * n
            3) unregular size, several rows more than tile_y*n
            4) unregular size, several columns and rows more

